---
import { siteConfig } from "../config";
import fs from 'fs';
import path from 'path';

const hasRambling = siteConfig.rambling && siteConfig.rambling.length > 0;

// Helper function to get English value for initial render
function getEN(value: any): any {
  if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
    return value.en || '';
  }
  return value || '';
}

// Load blog content from markdown files (support bilingual files)
const ramblingWithContent = siteConfig.rambling?.map(item => {
  if (item.type === 'blog' && item.file) {
    try {
      const fullContent = { en: '', zh: '' };

      // Check if file is an object with language keys or a string
      if (typeof item.file === 'object') {
        // Load both language versions if available
        if (item.file.en) {
          const enPath = path.join(process.cwd(), 'src/content/blogs', item.file.en);
          fullContent.en = fs.readFileSync(enPath, 'utf-8');
        }
        if (item.file.zh) {
          const zhPath = path.join(process.cwd(), 'src/content/blogs', item.file.zh);
          fullContent.zh = fs.readFileSync(zhPath, 'utf-8');
        }

        // Fallback: if one language is missing, use the other
        if (!fullContent.en && fullContent.zh) fullContent.en = fullContent.zh;
        if (!fullContent.zh && fullContent.en) fullContent.zh = fullContent.en;
      } else {
        // Legacy support: single file for both languages
        const filePath = path.join(process.cwd(), 'src/content/blogs', item.file);
        const content = fs.readFileSync(filePath, 'utf-8');
        fullContent.en = content;
        fullContent.zh = content;
      }

      return { ...item, fullContent };
    } catch (error) {
      console.error(`Failed to load blog file: ${item.file}`, error);
      return { ...item, fullContent: { en: 'Content not available', zh: '内容不可用' } };
    }
  }
  return item;
}) || [];

// Sort rambling by date (newest first)
const sortedRambling = ramblingWithContent.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

// Get all unique tags
const allTags = [...new Set(siteConfig.rambling?.map(item => item.tag) || [])];

// Format date function
function formatDate(dateStr) {
  const date = new Date(dateStr);
  return date.toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  });
}

// Tag color mapping
const tagColors = {
  'AI': '#3b82f6',     // Blue
  'personal': '#10b981', // Green
  'tech': '#f59e0b',   // Amber
  'work': '#8b5cf6',   // Purple
  'default': '#6b7280' // Gray
};

function getTagColor(tag) {
  return tagColors[tag] || tagColors.default;
}
---

{
  hasRambling && (
    <section id="rambling" class="p-8 sm:p-12 md:p-16 lg:p-24 bg-gray-50">
      <div>
        <div class="grid grid-cols-1 lg:grid-cols-12 gap-8 lg:gap-16 items-start">
          <div class="lg:col-span-4">
            <h2 class="text-3xl sm:text-4xl md:text-5xl xl:text-7xl font-bold text-gray-900" data-i18n="ramblingTitle">
            Some Rambling
            </h2>
            <div
              class="w-[75px] h-[5px] mt-2 rounded-full"
              style={`background-color: ${siteConfig.accentColor}`}
            />
            <p class="text-sm text-gray-500 mt-4" data-i18n="ramblingDescription">
              Quick thoughts about myself or AI from recent learning, listening, and building.
            </p>
            <p class="text-xs text-gray-400 mt-2 italic" data-i18n="aiDisclaimer">
              Content may be AI-assisted.
            </p>
          </div>

          <div class="lg:col-span-8">
            <!-- Filter buttons -->
            <div class="mb-4 space-y-2">
              <!-- Type filter -->
              <div class="flex flex-wrap gap-2">
                <button
                  class="type-filter px-3 py-1 text-sm rounded-full border transition-all duration-200 active"
                  data-type="all"
                  data-i18n="allTypes"
                  style="background-color: #f1f5f9; border-color: #cbd5e1; color: #475569;"
                >
                  All Types
                </button>
                <button
                  class="type-filter px-3 py-1 text-sm rounded-full border transition-all duration-200"
                  data-type="snippet"
                  data-i18n="snippets"
                  style="background-color: #fef3c7; border-color: #fcd34d; color: #d97706;"
                >
                  Snippets
                </button>
                <button
                  class="type-filter px-3 py-1 text-sm rounded-full border transition-all duration-200"
                  data-type="blog"
                  data-i18n="blogs"
                  style="background-color: #ddd6fe; border-color: #c4b5fd; color: #7c3aed;"
                >
                  Blogs
                </button>
              </div>
              <!-- Tag filter -->
              <div class="flex flex-wrap gap-2">
                <button
                  class="tag-filter px-3 py-1 text-sm rounded-full border transition-all duration-200 active"
                  data-tag="all"
                  data-i18n="allTags"
                  style="background-color: #f1f5f9; border-color: #cbd5e1; color: #475569;"
                >
                  All Tags
                </button>
                {allTags.map((tag) => (
                  <button
                    class="tag-filter px-3 py-1 text-sm rounded-full border transition-all duration-200"
                    data-tag={tag}
                    style={`background-color: ${getTagColor(tag)}20; border-color: ${getTagColor(tag)}40; color: ${getTagColor(tag)};`}
                  >
                    {tag}
                  </button>
                ))}
              </div>
            </div>
            
            <!-- Vertical scrollable container -->
            <div class="relative">
              <div 
                class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-y-auto scroll-smooth"
                style="height: 600px; scrollbar-width: thin; scrollbar-color: #cbd5e0 transparent;"
              >
                <div class="divide-y divide-gray-100">
                  {sortedRambling.map((note, index) => (
                    <div
                      class={`rambling-item p-4 hover:bg-gray-50 transition-colors duration-200 ${note.type === 'blog' ? 'cursor-pointer' : ''}`}
                      data-tag={note.tag}
                      data-type={note.type}
                      data-index={index}
                    >
                      <div class="flex items-start gap-3">
                        <div class="flex-shrink-0 mt-1">
                          <div
                            class="w-2 h-2 rounded-full"
                            style={`background-color: ${getTagColor(note.tag)};`}
                          ></div>
                        </div>
                        <div class="flex-grow min-w-0">
                          <div class="flex items-center justify-between mb-2">
                            <div class="flex items-center gap-2">
                              <time
                                class="text-sm font-medium text-gray-500"
                                datetime={note.date}
                              >
                                {formatDate(note.date)}
                              </time>
                              <span
                                class="px-2 py-1 text-xs rounded-full font-medium"
                                style={`background-color: ${getTagColor(note.tag)}20; color: ${getTagColor(note.tag)};`}
                              >
                                {note.tag}
                              </span>
                              <span
                                class={`px-2 py-1 text-xs rounded-full font-medium ${
                                  note.type === 'blog'
                                    ? 'bg-purple-100 text-purple-700'
                                    : 'bg-amber-100 text-amber-700'
                                }`}
                                data-i18n={note.type === 'blog' ? 'blog' : 'snippet'}
                              >
                                {note.type === 'blog' ? 'Blog' : 'Snippet'}
                              </span>
                            </div>
                          </div>
                          {note.type === 'snippet' ? (
                            <p class="text-base text-gray-700 leading-relaxed" data-rambling-content={index}>
                              {getEN(note.content)}
                            </p>
                          ) : (
                            <div>
                              <h3 class="text-lg font-semibold text-gray-900 mb-1" data-rambling-title={index}>
                                {getEN(note.title)}
                              </h3>
                              <p class="text-sm text-gray-600 leading-relaxed" data-rambling-summary={index}>
                                {getEN(note.summary)}
                              </p>
                              <button class="mt-2 text-sm font-medium text-blue-600 hover:text-blue-700 flex items-center gap-1" data-i18n="readMore">
                                Read more
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                                </svg>
                              </button>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              
              <!-- Scroll hint -->
              <div class="flex justify-center mt-2">
                <div class="text-xs text-gray-400 flex items-center gap-1">
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"/>
                  </svg>
                  <span data-i18n="scrollForMore">Scroll for more</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Blog Modal -->
      <div id="blog-modal" class="fixed inset-0 z-50 hidden items-center justify-center p-4 bg-black bg-opacity-50">
        <div class="bg-white rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-hidden">
          <div class="sticky top-0 bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between">
            <div class="flex-1">
              <h2 id="modal-title" class="text-2xl font-bold text-gray-900"></h2>
              <div class="flex items-center gap-3 mt-2">
                <time id="modal-date" class="text-sm text-gray-500"></time>
                <span id="modal-tag" class="px-2 py-1 text-xs rounded-full font-medium"></span>
              </div>
            </div>
            <button id="close-modal" class="ml-4 text-gray-400 hover:text-gray-600 transition-colors">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
              </svg>
            </button>
          </div>
          <div class="px-6 py-6 overflow-y-auto" style="max-height: calc(90vh - 120px);">
            <div id="modal-content" class="markdown-content"></div>
          </div>
        </div>
      </div>
    </section>
  )
}

<!-- Load marked.js from CDN -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

<script define:vars={{ sortedRambling }}>
  document.addEventListener('DOMContentLoaded', function() {
    const tagFilterButtons = document.querySelectorAll('.tag-filter');
    const typeFilterButtons = document.querySelectorAll('.type-filter');
    const ramblingItems = document.querySelectorAll('.rambling-item');
    const blogModal = document.getElementById('blog-modal');
    const closeModalBtn = document.getElementById('close-modal');

    let currentTagFilter = 'all';
    let currentTypeFilter = 'all';

    // Tag filter
    tagFilterButtons.forEach(button => {
      button.addEventListener('click', function() {
        currentTagFilter = this.getAttribute('data-tag');
        tagFilterButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        applyFilters();
      });
    });

    // Type filter
    typeFilterButtons.forEach(button => {
      button.addEventListener('click', function() {
        currentTypeFilter = this.getAttribute('data-type');
        typeFilterButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        applyFilters();
      });
    });

    // Apply both filters
    function applyFilters() {
      ramblingItems.forEach(item => {
        const itemTag = item.getAttribute('data-tag');
        const itemType = item.getAttribute('data-type');
        const tagMatch = currentTagFilter === 'all' || itemTag === currentTagFilter;
        const typeMatch = currentTypeFilter === 'all' || itemType === currentTypeFilter;

        if (tagMatch && typeMatch) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    }

    // Blog modal
    ramblingItems.forEach(item => {
      if (item.getAttribute('data-type') === 'blog') {
        item.addEventListener('click', function() {
          const index = parseInt(this.getAttribute('data-index'));
          const blog = sortedRambling[index];

          const currentLang = localStorage.getItem('language') || 'en';
          const getLocalizedValue = (value, lang) => {
            if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
              return value[lang] || value.en || '';
            }
            return value || '';
          };

          document.getElementById('modal-title').textContent = getLocalizedValue(blog.title, currentLang);
          document.getElementById('modal-date').textContent = new Date(blog.date).toLocaleDateString('en-US', {
            month: 'short',
            day: 'numeric',
            year: 'numeric'
          });

          const modalTag = document.getElementById('modal-tag');
          modalTag.textContent = blog.tag;

          const tagColors = {
            'AI': '#3b82f6',
            'personal': '#10b981',
            'tech': '#f59e0b',
            'work': '#8b5cf6',
            'default': '#6b7280'
          };
          const tagColor = tagColors[blog.tag] || tagColors.default;
          modalTag.style.backgroundColor = tagColor + '20';
          modalTag.style.color = tagColor;

          const blogContent = getLocalizedValue(blog.fullContent, currentLang);

          // Use marked.js library to convert markdown to HTML
          if (typeof marked !== 'undefined') {
            const htmlContent = marked.parse(blogContent);
            document.getElementById('modal-content').innerHTML = htmlContent;
          } else {
            // Fallback if marked.js not loaded
            document.getElementById('modal-content').innerHTML = '<p>' + blogContent.replace(/\n\n/g, '</p><p>') + '</p>';
          }

          blogModal.classList.remove('hidden');
          blogModal.classList.add('flex');
          document.body.style.overflow = 'hidden';
        });
      }
    });

    // Close modal
    function closeModal() {
      blogModal.classList.add('hidden');
      blogModal.classList.remove('flex');
      document.body.style.overflow = 'auto';
    }

    closeModalBtn.addEventListener('click', closeModal);
    blogModal.addEventListener('click', function(e) {
      if (e.target === blogModal) {
        closeModal();
      }
    });

    // ESC key to close
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && !blogModal.classList.contains('hidden')) {
        closeModal();
      }
    });

    // Language change handler
    function getLocalizedValue(value, lang) {
      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
        return value[lang] || value.en || '';
      }
      return value || '';
    }

    window.addEventListener('languageChange', (e) => {
      const lang = e.detail.lang;

      sortedRambling.forEach((item, index) => {
        if (item.type === 'snippet') {
          const contentEl = document.querySelector(`[data-rambling-content="${index}"]`);
          if (contentEl) {
            contentEl.textContent = getLocalizedValue(item.content, lang);
          }
        } else if (item.type === 'blog') {
          const titleEl = document.querySelector(`[data-rambling-title="${index}"]`);
          const summaryEl = document.querySelector(`[data-rambling-summary="${index}"]`);

          if (titleEl) {
            titleEl.textContent = getLocalizedValue(item.title, lang);
          }
          if (summaryEl) {
            summaryEl.textContent = getLocalizedValue(item.summary, lang);
          }
        }
      });
    });
  });
</script>

<style>
  /* Custom scrollbar styling for webkit browsers */
  .overflow-y-auto::-webkit-scrollbar {
    width: 6px;
  }
  
  .overflow-y-auto::-webkit-scrollbar-track {
    background: #f8fafc;
    border-radius: 3px;
  }
  
  .overflow-y-auto::-webkit-scrollbar-thumb {
    background: #cbd5e0;
    border-radius: 3px;
  }
  
  .overflow-y-auto::-webkit-scrollbar-thumb:hover {
    background: #a0aec0;
  }
  
  /* Smooth scrolling behavior */
  .overflow-y-auto {
    scroll-behavior: smooth;
  }
  
  /* Tag filter button styles */
  .tag-filter {
    cursor: pointer;
  }
  
  .tag-filter:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .tag-filter.active {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    transform: translateY(-1px);
    font-weight: 600;
  }
  
  /* Animation for filtered items */
  .rambling-item {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
  
  .rambling-item[style*="none"] {
    opacity: 0;
    transform: translateY(-10px);
  }

  /* Markdown content styles */
  .markdown-content {
    line-height: 1.8;
    color: #374151;
    font-size: 16px;
  }

  .markdown-content h1 {
    font-size: 1.875rem;
    font-weight: 700;
    margin-top: 0;
    margin-bottom: 1rem;
    color: #111827;
    line-height: 1.2;
    border-bottom: 2px solid #e5e7eb;
    padding-bottom: 0.5rem;
  }

  .markdown-content h2 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 2rem;
    margin-bottom: 0.75rem;
    color: #1f2937;
    line-height: 1.3;
  }

  .markdown-content h3 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
    color: #374151;
    line-height: 1.4;
  }

  .markdown-content p {
    margin-bottom: 1rem;
    line-height: 1.75;
  }

  .markdown-content strong {
    font-weight: 600;
    color: #111827;
  }

  .markdown-content ul {
    margin: 1rem 0;
    padding-left: 1.5rem;
    list-style-type: disc;
  }

  .markdown-content ol {
    margin: 1rem 0;
    padding-left: 1.5rem;
    list-style-type: decimal;
  }

  .markdown-content li {
    margin-bottom: 0.5rem;
    line-height: 1.6;
  }

  .markdown-content a {
    color: #3b82f6;
    text-decoration: underline;
    transition: color 0.2s;
  }

  .markdown-content a:hover {
    color: #2563eb;
  }

  .markdown-content hr {
    margin: 2.5rem 0;
    border: none;
    border-top: 1px solid #e5e7eb;
  }

  .markdown-content code {
    background-color: #f3f4f6;
    padding: 0.2em 0.4em;
    border-radius: 3px;
    font-family: 'Monaco', 'Courier New', monospace;
    font-size: 0.875em;
    color: #dc2626;
  }

  .markdown-content pre {
    background-color: #f3f4f6;
    padding: 1rem;
    border-radius: 6px;
    overflow-x: auto;
    margin: 1rem 0;
  }

  .markdown-content pre code {
    background: none;
    padding: 0;
    color: #374151;
  }

  .markdown-content blockquote {
    border-left: 4px solid #e5e7eb;
    padding-left: 1rem;
    margin: 1.5rem 0;
    color: #6b7280;
    font-style: italic;
  }

  /* First h1 has no top margin */
  .markdown-content > h1:first-child {
    margin-top: 0;
  }
</style>
